---
import "@/lib/saving-progress/styles.scss";
import "7.css/dist/7.scoped.css";

import Layout from "@/layouts/Layout.astro";
import Profile from "@/models/Profile";
import LoginRequired from "@/layouts/LoginRequired.astro";
import Box from "@/components/Box.astro";

const sessionProfile = await Profile.current(Astro);

if (!sessionProfile) {
  Astro.response.status = 403;
}
---

<LoginRequired profile={sessionProfile}>
  <Layout
    title="Configura√ß√µes do site"
    profile={sessionProfile}
    id="config_page"
  >
    <div class="container">
      <Box title="Configura√ß√µes do site" color="#0c4895">
        <form class="win7">
          <div class="field">
            <label for="color" class="arial">Cor do cabe√ßalho</label>
            <div class="side">
              <select name="color" id="color">
                <option
                  value="default"
                  selected={!sessionProfile?.preferences?.color}>Padr√£o</option
                >
                <option
                  value="custom"
                  selected={sessionProfile?.preferences?.color &&
                    sessionProfile?.preferences?.color !== "rainbow"}
                  >Escolher cor...</option
                >
                <option
                  value="rainbow"
                  selected={sessionProfile?.preferences?.color === "rainbow"}
                  >üè≥Ô∏è‚Äçüåà? ü§®</option
                >
              </select>
              <input
                type="color"
                name="custom-color"
                id="custom-color"
                class={sessionProfile?.preferences?.color &&
                sessionProfile?.preferences?.color !== "rainbow"
                  ? ""
                  : "hidden"}
                value={sessionProfile?.preferences?.color || "#000000"}
              />
            </div>
            <button type="button">Pr√©-visualizar</button>
          </div>
          <div class="field">
            <label for="password-reset" class="arial">Recuperar senha</label>
            <button type="button">Enviar e-mail de recupera√ß√£o de senha</button>
          </div>
        </form>
      </Box>
    </div>
  </Layout>

  <script>
    import {
      removeSavingDialog,
      showSavingDialog,
    } from "@/lib/saving-progress";
    import { supabase } from "@/lib/supabaseClient";

    const avatarPicker = document.querySelector(
      "#editar_conta #avatar"
    ) as HTMLInputElement;
    const avatarImg = document.querySelector(
      "#editar_conta #avatar_img"
    ) as HTMLImageElement;
    const form = document.querySelector(
      "#editar_conta form"
    ) as HTMLFormElement;
    const passwordReset = document.querySelector(
      "#editar_conta #password-reset"
    ) as HTMLButtonElement;

    avatarPicker.addEventListener("change", (event) => {
      const target = event.target as HTMLInputElement;
      const fileUploaded = target.files ? target.files[0] : null;
      if (fileUploaded) avatarImg.src = URL.createObjectURL(fileUploaded);
    });

    form.addEventListener("submit", (event) => {
      event.preventDefault();
      onSubmit();
    });

    passwordReset.addEventListener("click", async (event) => {
      event.preventDefault();
      const user = await supabase.auth.getUser();
      if (user.error) {
        alert("Voc√™ n√£o t√° logado.");
        return;
      }

      const email = user.data.user.email!;

      const { error } = await supabase.auth.resetPasswordForEmail(email, {
        redirectTo: `https://especulamente.netlify.app/admin/recuperar-senha`,
      });
      if (error) {
        alert(error.message);
        return;
      }
      alert("Um e-mail foi enviado para redefinir sua senha!");
    });

    async function onSubmit() {
      const data = new FormData(form);

      showSavingDialog();

      const response = await (
        await fetch("/admin/actions/account", {
          method: "put",
          body: data,
        })
      ).json();

      if (response.error) {
        alert(response.error.message);
        removeSavingDialog();
        return;
      }

      const newUsername = (form.querySelector("#username") as HTMLInputElement)
        .value;

      window.location.href = `/users/${newUsername}`;
    }
  </script>
</LoginRequired>

<style lang="scss" is:global>
  #config_page .container {
    padding-top: 26px;
    padding-bottom: 26px;

    form {
      padding: 1rem;
      display: flex;
      flex-direction: column;
      gap: 16px;

      .field {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        gap: 6px;

        .hidden {
          display: none;
        }

        label {
          color: white;
        }

        .side {
          display: flex;
          gap: 6px;
        }

        input[type="color"] {
          height: 22px;
          width: 22px;
        }
      }
    }
  }
</style>
